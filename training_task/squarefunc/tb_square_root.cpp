#include "Vsquareroot.h"  // Include the header file generated by Verilator for the `squareroot` module
#include "verilated.h"    // Include Verilator's primary runtime library
#include <iostream>       // For standard I/O operations
#include <cmath>          // For using the standard math library 


void test_sqrt(Vsquareroot* top, int input) {
    top->x = input;         // Assign the input value to the Verilog module's input port
    top->eval();            // Evaluate the Verilog model

    int result = top->result;  // Retrieve the output from the Verilog module
    std::cout << "sqrt(" << input << ") = " << result
              << " (Expected: " << static_cast<int>(std::sqrt(input)) << ")" << std::endl;
              // Print the input, the Verilog module's computed result, and the expected result using std::sqrt
}

int main(int argc, char** argv) {
    Verilated::commandArgs(argc, argv);  // Initialize Verilator with command-line arguments
    Vsquareroot* top = new Vsquareroot;  // Create an instance of the Verilog model

    // Test cases for the square root module
    test_sqrt(top, 28000); // Test with 28000: sqrt(28000) ≈ 167
    test_sqrt(top, 1000);  // Test with 1000: sqrt(1000) ≈ 31
    test_sqrt(top, 0);     // Test with 0: sqrt(0) = 0
    test_sqrt(top, 5000);  // Test with 5000: sqrt(5000) ≈ 70

    delete top;  // Clean up and delete the Verilog model instance
    return 0;    // Exit the program
}
